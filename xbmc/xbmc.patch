diff -x generated -r -u xbmc-12.2/Makefile.in xbmc/Makefile.in
--- xbmc-12.2/Makefile.in	2013-05-03 07:57:40.000000000 +0200
+++ xbmc/Makefile.in	2013-08-27 17:35:26.000000000 +0200
@@ -476,7 +476,7 @@
 	$(MAKE) -C pvr-addons install
 endif
 ifeq ($(findstring freebsd,@ARCH@), freebsd)
-	@find -E system addons -type f -not -iregex ".*svn.*" \
+	@find system addons -type f -not -iregex ".*svn.*" \
 		-iregex ".*@ARCH@.*|.*\.vis|.*\.xbs" \
 		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/xbmc/\`dirname '{}'\`\"" \; \
 		-and \
@@ -484,7 +484,7 @@
 		-exec printf " -- %-75.75s\r" "{}" \;
 else
 ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
-	@find -E system addons -type f -not -iregex ".*svn.*" \
+	@find system addons -type f -not -iregex ".*svn.*" \
 		-iregex ".*@ARCH@.*|.*\.vis|.*\.xbs" \
 		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/xbmc/\`dirname '{}'\`\"" \; \
 		-and \
@@ -515,7 +515,7 @@
 	@install -d $(DESTDIR)$(datarootdir)/xbmc
 	@# Arch independent files
 ifeq ($(findstring bsd,@ARCH@), bsd)
-	@find -E addons language media sounds userdata system -type f \
+	@find addons language media sounds userdata system -type f \
 		-not -iregex ".*@ARCH@.*|.*\.vis|.*\.xbs|.*svn.*|.*\.so|.*\.dll" \
 		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
 		-and \
@@ -523,7 +523,7 @@
 		-exec printf " -- %-75.75s\r" "{}" \;
 else
 ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
-	@find -E addons language media sounds userdata system -type f \
+	@find addons language media sounds userdata system -type f \
 		-not -iregex ".*@ARCH@.*|.*\.vis|.*\.xbs|.*svn.*|.*\.so|.*\.dll" \
 		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
 		-and \
diff -x generated -r -u xbmc-12.2/configure xbmc/configure
--- xbmc-12.2/configure	2013-05-03 07:57:46.000000000 +0200
+++ xbmc/configure	2013-08-27 17:35:26.000000000 +0200
@@ -18135,7 +18135,7 @@
 }
 _ACEOF
 if ac_fn_c_try_compile "$LINENO"; then :
-  have_builtin_sync_add_and_fetch=yes
+  have_builtin_sync_add_and_fetch=no
 else
   have_builtin_sync_add_and_fetch=no
 fi
@@ -18162,7 +18162,7 @@
 }
 _ACEOF
 if ac_fn_c_try_compile "$LINENO"; then :
-  have_builtin_sync_sub_and_fetch=yes
+  have_builtin_sync_sub_and_fetch=no
 else
   have_builtin_sync_sub_and_fetch=no
 fi
@@ -18189,7 +18189,7 @@
 }
 _ACEOF
 if ac_fn_c_try_compile "$LINENO"; then :
-  have_builtin_sync_val_compare_and_swap=yes
+  have_builtin_sync_val_compare_and_swap=no
 else
   have_builtin_sync_val_compare_and_swap=no
 fi
diff -x generated -r -u xbmc-12.2/xbmc/Application.cpp xbmc/xbmc/Application.cpp
--- xbmc-12.2/xbmc/Application.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/Application.cpp	2013-08-27 17:35:26.000000000 +0200
@@ -339,6 +339,10 @@
 #include "android/activity/XBMCApp.h"
 #endif
 
+#ifdef HAS_INTEL_SMD
+#include "cores/IntelSMDGlobals.h"
+#endif
+
 using namespace std;
 using namespace ADDON;
 using namespace XFILE;
@@ -697,6 +701,9 @@
   CLog::Log(LOGNOTICE, "load settings...");
 
   g_guiSettings.Initialize();  // Initialize default Settings - don't move
+#ifdef HAS_INTEL_SMD
+  g_IntelSMDGlobals.InitAudio();
+#endif
   g_powerManager.SetDefaults();
   if (!g_settings.Load())
   {
@@ -3640,6 +3647,10 @@
     CAEFactory::Shutdown();
     CAEFactory::UnLoadEngine();
 
+#ifdef HAS_INTEL_SMD
+    g_IntelSMDGlobals.DeInitAudio();
+#endif
+
     CLog::Log(LOGNOTICE, "stopped");
   }
   catch (...)
diff -x generated -r -u xbmc-12.2/xbmc/cores/AudioEngine/AESinkFactory.cpp xbmc/xbmc/cores/AudioEngine/AESinkFactory.cpp
--- xbmc-12.2/xbmc/cores/AudioEngine/AESinkFactory.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/AudioEngine/AESinkFactory.cpp	2013-08-27 17:35:26.000000000 +0200
@@ -25,6 +25,8 @@
   #include "Sinks/AESinkDirectSound.h"
 #elif defined(TARGET_ANDROID)
   #include "Sinks/AESinkAUDIOTRACK.h"
+#elif defined(TARGET_BOXEE)
+  #include "Sinks/AESinkIntelSMD.h"
 #elif defined(TARGET_LINUX) || defined(TARGET_FREEBSD)
   #if defined(HAS_ALSA)
     #include "Sinks/AESinkALSA.h"
@@ -55,6 +57,8 @@
         driver == "DIRECTSOUND" ||
 #elif defined(TARGET_ANDROID)
         driver == "AUDIOTRACK"  ||
+#elif defined(TARGET_BOXEE)
+        driver == "IntelSMD"    ||
 #elif defined(TARGET_LINUX) || defined(TARGET_FREEBSD)
   #if defined(HAS_ALSA)
         driver == "ALSA"        ||
@@ -110,7 +114,9 @@
 #elif defined(TARGET_ANDROID)
   if (driver.empty() || driver == "AUDIOTRACK")
     TRY_SINK(AUDIOTRACK)
-
+#elif defined(TARGET_BOXEE)
+  if (driver.empty() || driver == "IntelSMD")
+    TRY_SINK(IntelSMD)
 #elif defined(TARGET_LINUX) || defined(TARGET_FREEBSD)
   #if defined(HAS_ALSA)
   if (driver.empty() || driver == "ALSA")
@@ -145,6 +151,8 @@
     ENUMERATE_SINK(WASAPI, force);
 #elif defined(TARGET_ANDROID)
     ENUMERATE_SINK(AUDIOTRACK, force);
+#elif defined(TARGET_BOXEE)
+    ENUMERATE_SINK(IntelSMD, force);
 #elif defined(TARGET_LINUX) || defined(TARGET_FREEBSD)
   #if defined(HAS_ALSA)
     ENUMERATE_SINK(ALSA, force);
diff -x generated -r -u xbmc-12.2/xbmc/cores/AudioEngine/Makefile.in xbmc/xbmc/cores/AudioEngine/Makefile.in
--- xbmc-12.2/xbmc/cores/AudioEngine/Makefile.in	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/AudioEngine/Makefile.in	2013-08-27 17:35:26.000000000 +0200
@@ -38,6 +38,7 @@
 SRCS += AESinkFactory.cpp
 SRCS += Sinks/AESinkNULL.cpp
 SRCS += Sinks/AESinkProfiler.cpp
+SRCS += Sinks/AESinkIntelSMD.cpp
 
 SRCS += Engines/SoftAE/SoftAE.cpp
 SRCS += Engines/SoftAE/SoftAEStream.cpp
diff -x generated -r -u xbmc-12.2/xbmc/cores/Makefile.in xbmc/xbmc/cores/Makefile.in
--- xbmc-12.2/xbmc/cores/Makefile.in	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/Makefile.in	2013-08-27 17:35:26.000000000 +0200
@@ -1,4 +1,5 @@
 SRCS = DummyVideoPlayer.cpp
+SRCS += IntelSMDGlobals.cpp
 
 LIB = cores.a
 
diff -x generated -r -u xbmc-12.2/xbmc/cores/VideoRenderers/Makefile.in xbmc/xbmc/cores/VideoRenderers/Makefile.in
--- xbmc-12.2/xbmc/cores/VideoRenderers/Makefile.in	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/VideoRenderers/Makefile.in	2013-08-27 17:35:26.000000000 +0200
@@ -3,6 +3,7 @@
 SRCS += OverlayRendererUtil.cpp
 SRCS += RenderCapture.cpp
 SRCS += RenderManager.cpp
+SRCS += IntelSMDRenderer.cpp
 
 ifeq ($(findstring arm,@ARCH@),arm)
 SRCS += yuv2rgb.neon.S
diff -x generated -r -u xbmc-12.2/xbmc/cores/VideoRenderers/RenderFlags.h xbmc/xbmc/cores/VideoRenderers/RenderFlags.h
--- xbmc-12.2/xbmc/cores/VideoRenderers/RenderFlags.h	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/VideoRenderers/RenderFlags.h	2013-08-27 17:35:26.000000000 +0200
@@ -73,4 +73,6 @@
 #define CONF_FLAGS_FORMAT_SBS     0x001000
 #define CONF_FLAGS_FORMAT_TB      0x002000
 
+#define CONF_FLAGS_SMD_DECODING   0x004000
+
 #endif
diff -x generated -r -u xbmc-12.2/xbmc/cores/VideoRenderers/RenderManager.cpp xbmc/xbmc/cores/VideoRenderers/RenderManager.cpp
--- xbmc-12.2/xbmc/cores/VideoRenderers/RenderManager.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/VideoRenderers/RenderManager.cpp	2013-08-27 22:03:49.000000000 +0200
@@ -35,7 +35,9 @@
 #include "settings/GUISettings.h"
 #include "settings/AdvancedSettings.h"
 
-#if defined(HAS_GL)
+#if defined(HAS_INTEL_SMD2)
+  #include "IntelSMDRenderer.h"
+#elif defined(HAS_GL)
   #include "LinuxRendererGL.h"
 #elif HAS_GLES == 2
   #include "LinuxRendererGLES.h"
@@ -325,7 +327,9 @@
   m_bPauseDrawing = false;
   if (!m_pRenderer)
   {
-#if defined(HAS_GL)
+#if defined(HAS_INTEL_SMD2)
+    m_pRenderer = new CIntelSMDRenderer();
+#elif defined(HAS_GL)
     m_pRenderer = new CLinuxRendererGL();
 #elif HAS_GLES == 2
     m_pRenderer = new CLinuxRendererGLES();
diff -x generated -r -u xbmc-12.2/xbmc/cores/VideoRenderers/RenderManager.h xbmc/xbmc/cores/VideoRenderers/RenderManager.h
--- xbmc-12.2/xbmc/cores/VideoRenderers/RenderManager.h	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/VideoRenderers/RenderManager.h	2013-08-27 22:04:02.000000000 +0200
@@ -43,6 +43,7 @@
 class CLinuxRenderer;
 class CLinuxRendererGL;
 class CLinuxRendererGLES;
+class CIntelSMDRenderer;
 
 class CXBMCRenderManager
 {
@@ -110,7 +111,9 @@
 
   void UpdateResolution();
 
-#ifdef HAS_GL
+#if defined(HAS_INTEL_SMD2)
+  CIntelSMDRenderer   *m_pRenderer;
+#elif defined(HAS_GL)
   CLinuxRendererGL    *m_pRenderer;
 #elif HAS_GLES == 2
   CLinuxRendererGLES  *m_pRenderer;
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDAudio.cpp xbmc/xbmc/cores/dvdplayer/DVDAudio.cpp
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDAudio.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDAudio.cpp	2013-08-27 17:35:26.000000000 +0200
@@ -321,7 +321,9 @@
 
 void CDVDAudio::SetVolume(float volume)
 {
+#ifndef HAS_INTEL_SMD
   CSingleLock lock (m_critSection);
+#endif
   if (m_pAudioStream) m_pAudioStream->SetVolume(volume);
 }
 
@@ -343,14 +345,18 @@
 
 void CDVDAudio::Pause()
 {
+#ifndef HAS_INTEL_SMD
   CSingleLock lock (m_critSection);
+#endif
   if (m_pAudioStream) m_pAudioStream->Pause();
   m_time.Flush();
 }
 
 void CDVDAudio::Resume()
 {
+#ifndef HAS_INTEL_SMD
   CSingleLock lock (m_critSection);
+#endif
   if (m_pAudioStream) m_pAudioStream->Resume();
 }
 
@@ -386,12 +392,12 @@
 
   if(audioframe.passthrough != m_bPassthrough)
     return false;
-
+#ifndef HAS_INTEL_SMD
   if(m_iBitrate       != audioframe.sample_rate
   || m_iBitsPerSample != audioframe.bits_per_sample
   || m_channelLayout  != audioframe.channel_layout)
     return false;
-
+#endif
   return true;
 }
 
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDClock.cpp xbmc/xbmc/cores/dvdplayer/DVDClock.cpp
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDClock.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDClock.cpp	2013-08-27 17:35:26.000000000 +0200
@@ -25,6 +25,10 @@
 #include "threads/SingleLock.h"
 #include "utils/log.h"
 
+#ifdef HAS_INTEL_SMD
+#include "../IntelSMDGlobals.h"
+#endif
+
 int64_t CDVDClock::m_systemOffset;
 int64_t CDVDClock::m_systemFrequency;
 CCriticalSection CDVDClock::m_systemsection;
@@ -45,6 +49,9 @@
 
   m_ismasterclock = true;
   m_startClock = 0;
+#ifdef HAS_INTEL_SMD
+  g_IntelSMDGlobals.ResetClock();
+#endif
 }
 
 CDVDClock::~CDVDClock()
@@ -118,12 +125,19 @@
   {
     if(!m_pauseClock)
       m_pauseClock = g_VideoReferenceClock.GetTime();
+#ifdef HAS_INTEL_SMD
+    g_IntelSMDGlobals.PauseClock();
+#endif
     return;
   }
 
   int64_t current;
   int64_t newfreq = m_systemFrequency * DVD_PLAYSPEED_NORMAL / iSpeed;
 
+#ifdef HAS_INTEL_SMD
+  g_IntelSMDGlobals.ResumeClock();
+#endif
+
   current = g_VideoReferenceClock.GetTime();
   if( m_pauseClock )
   {
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDCodecs/Audio/Makefile.in xbmc/xbmc/cores/dvdplayer/DVDCodecs/Audio/Makefile.in
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDCodecs/Audio/Makefile.in	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDCodecs/Audio/Makefile.in	2013-08-27 17:35:26.000000000 +0200
@@ -7,6 +7,7 @@
 SRCS += DVDAudioCodecLPcm.cpp
 SRCS += DVDAudioCodecPassthrough.cpp
 SRCS += DVDAudioCodecPcm.cpp
+SRCS += DVDAudioCodecSMD.cpp
 
 ifeq ($(findstring osx,@ARCH@),osx)
 SRCS += DVDAudioCodecPassthroughFFmpeg.cpp
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp xbmc/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp	2013-08-27 22:05:10.000000000 +0200
@@ -48,7 +48,10 @@
 #include "Overlay/DVDOverlayCodecText.h"
 #include "Overlay/DVDOverlayCodecTX3G.h"
 #include "Overlay/DVDOverlayCodecFFmpeg.h"
-
+#if defined HAS_INTEL_SMD
+#include "Audio/DVDAudioCodecSMD.h"
+#include "Video/DVDVideoCodecSMD.h"
+#endif
 
 #include "DVDStreamInfo.h"
 #include "settings/GUISettings.h"
@@ -172,6 +175,16 @@
 
   CLog::Log(LOGDEBUG, "CDVDFactoryCodec: compiled in hardware support: %s", hwSupport.c_str());
 
+// #ifdef HAS_INTEL_SMD
+//     // for DVD use libmpeg2
+// //    if(hint.width == 720 && (hint.height == 480 || hint.height == 576))
+// //      if( hint.codec == CODEC_ID_MPEG2VIDEO && (pCodec = OpenCodec(new CDVDVideoCodecLibMpeg2(), hint, dvdOptions)) )
+// //        return pCodec;
+
+//     if( !hint.software && (pCodec = OpenCodec(new CDVDVideoCodecSMD(), hint, options)) )
+//       return pCodec;
+// #endif
+
   // dvd's have weird still-frames in it, which is not fully supported in ffmpeg
   if(hint.stills && (hint.codec == CODEC_ID_MPEG2VIDEO || hint.codec == CODEC_ID_MPEG1VIDEO))
   {
@@ -265,6 +278,11 @@
 {
   CDVDAudioCodec* pCodec = NULL;
   CDVDCodecOptions options;
+// #if defined(HAS_INTEL_SMD)
+//   if( !hint.software )
+//     pCodec = OpenCodec( new CDVDAudioCodecSMD(), hint, options );
+//   if( pCodec ) return pCodec;
+// #endif
 
   if (passthrough)
   {
@@ -283,7 +301,6 @@
     pCodec = OpenCodec( new CDVDAudioCodecPassthrough(), hint, options );
     if( pCodec ) return pCodec;
   }
-
   switch (hint.codec)
   {
   case CODEC_ID_MP2:
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in xbmc/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in	2013-08-27 17:35:26.000000000 +0200
@@ -3,6 +3,8 @@
 SRCS  = DVDVideoCodecFFmpeg.cpp
 SRCS += DVDVideoCodecLibMpeg2.cpp
 SRCS += DVDVideoPPFFmpeg.cpp
+SRCS += DVDVideoCodecSMD.cpp
+SRCS += IntelSMDVideo.cpp
 
 ifeq (@USE_VDPAU@,1)
 SRCS += VDPAU.cpp
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDPlayer.cpp xbmc/xbmc/cores/dvdplayer/DVDPlayer.cpp
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDPlayer.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDPlayer.cpp	2013-08-27 21:10:27.000000000 +0200
@@ -86,6 +86,10 @@
 #include "LangInfo.h"
 #include "ApplicationMessenger.h"
 
+#ifdef HAS_INTEL_SMD
+#include "cores/IntelSMDGlobals.h"
+#endif
+
 using namespace std;
 using namespace PVR;
 
@@ -1044,6 +1048,11 @@
   if (!CachePVRStream())
     SetCaching(CACHESTATE_FLUSH);
 
+// #ifdef HAS_INTEL_SMD 
+//   g_IntelSMDGlobals.SetBaseTime(g_IntelSMDGlobals.GetCurrentTime());
+//   g_IntelSMDGlobals.SetFlushFlag(true);
+// #endif
+
   while (!m_bAbortRequest)
   {
     // handle messages send to this thread, like seek or demuxer reset requests
@@ -1614,6 +1623,13 @@
       SetCaching(CACHESTATE_FULL);
     else
       SetCaching(CACHESTATE_INIT);
+
+// #ifdef HAS_INTEL_SMD
+//     // TODO(q)
+//     if(m_dvdPlayerAudio.IsPassthrough() || m_dvdPlayerAudio.IsHWDecode()) && m_dvdPlayerAudio.GetLevel() > 0)
+//        return false;
+// #endif
+
     return true;
   }
   return false;
@@ -1916,6 +1932,15 @@
 {
   g_dvdPerformanceCounter.DisableMainPerformance();
 
+#ifdef HAS_INTEL_SMD
+  if(m_bAbortRequest)
+  {
+    g_IntelSMDGlobals.SetVideoRenderState(ISMD_DEV_STATE_STOP);
+    g_IntelSMDGlobals.SetVideoDecoderState(ISMD_DEV_STATE_STOP);
+    g_IntelSMDGlobals.SetAudioDeviceState(ISMD_DEV_STATE_STOP, g_IntelSMDGlobals.GetPrimaryAudioDevice());
+  }
+#endif
+
   try
   {
     CLog::Log(LOGNOTICE, "CDVDPlayer::OnExit()");
@@ -2097,12 +2122,18 @@
             {
               m_dvd.iSelectedAudioStream = -1;
               CloseAudioStream(false);
+// #ifdef HAS_INTEL_SMD
+//               FlushBuffers(false);
+// #endif
               m_messenger.Put(new CDVDMsgPlayerSeek(GetTime(), true, true, true, true, true));
             }
           }
           else
           {
             CloseAudioStream(false);
+// #ifdef HAS_INTEL_SMD
+//               FlushBuffers(false);
+// #endif
             OpenAudioStream(st.id, st.source);
             m_messenger.Put(new CDVDMsgPlayerSeek(GetTime(), true, true, true, true, true));
           }
@@ -2243,6 +2274,10 @@
         {
           bool bSwitchSuccessful(false);
           bool bShowPreview(g_guiSettings.GetInt("pvrplayback.channelentrytimeout") > 0);
+// TODO(q)
+//#ifdef HAS_INTEL_SMD
+//          m_pDemuxer->Stop();
+//#endif
 
           if (!bShowPreview)
           {
@@ -2265,8 +2300,13 @@
             else
             {
               m_iChannelEntryTimeOut = 0;
+//TODO(q)
+//#ifndef HAS_INTEL_SMD
               SAFE_DELETE(m_pDemuxer);
-
+//#else
+              // TODO(q)
+//              m_pDemuxer->Start();
+//#endif
               g_infoManager.SetDisplayAfterSeek();
             }
           }
@@ -2342,8 +2382,13 @@
 void CDVDPlayer::SetPlaySpeed(int speed)
 {
   m_messenger.Put(new CDVDMsgInt(CDVDMsg::PLAYER_SETSPEED, speed));
+//#ifdef HAS_INTEL_SMD
+  if(speed == DVD_PLAYSPEED_PAUSE)
+//#endif
+  {
   m_dvdPlayerAudio.SetSpeed(speed);
   m_dvdPlayerVideo.SetSpeed(speed);
+  }
   SynchronizeDemuxer(100);
 }
 
@@ -3166,6 +3211,11 @@
   m_CurrentTeletext.dts      = DVD_NOPTS_VALUE;
   m_CurrentTeletext.startpts = startpts;
 
+// #ifdef HAS_INTEL_SMD
+//   g_IntelSMDGlobals.ResetClock();
+//   g_IntelSMDGlobals.SetFlushFlag(true);
+// #endif
+
   if(queued)
   {
     m_dvdPlayerAudio.SendMessage(new CDVDMsg(CDVDMsg::GENERAL_RESET));
@@ -3670,6 +3720,14 @@
   if (m_pInputStream && m_pInputStream->IsStreamType(DVDSTREAM_TYPE_DVD))
     return false;
 
+// #ifdef HAS_INTEL_SMD
+//   // all video rendering is done with SMD clock, so we need to match it here
+//   if(IsPaused())
+//     pts = g_IntelSMDGlobals.IsmdToDvdPts(g_IntelSMDGlobals.GetAudioPauseCurrentTime());
+//   else
+//     pts = g_IntelSMDGlobals.IsmdToDvdPts(g_IntelSMDGlobals.GetAudioCurrentTime());
+// #endif
+
   m_dvdPlayerSubtitle.GetCurrentSubtitle(strSubtitle, pts - m_dvdPlayerVideo.GetSubtitleDelay());
 
   // In case we stalled, don't output any subs
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDPlayerAudio.cpp xbmc/xbmc/cores/dvdplayer/DVDPlayerAudio.cpp
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDPlayerAudio.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDPlayerAudio.cpp	2013-08-28 06:27:33.000000000 +0200
@@ -648,8 +648,10 @@
   if( fabs(error) > DVD_MSEC_TO_TIME(100) || m_syncclock )
   {
     m_pClock->Discontinuity(clock+error);
+//#ifndef HAS_INTEL_SMD
     if(m_speed == DVD_PLAYSPEED_NORMAL)
       CLog::Log(LOGDEBUG, "CDVDPlayerAudio:: Discontinuity1 - was:%f, should be:%f, error:%f", clock, clock+error, error);
+//#endif
 
     m_errorbuff = 0;
     m_errorcount = 0;
diff -x generated -r -u xbmc-12.2/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp xbmc/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp
--- xbmc-12.2/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp	2013-08-27 21:10:50.000000000 +0200
@@ -45,6 +45,11 @@
 #include <iterator>
 #include "utils/log.h"
 
+#ifdef HAS_INTEL_SMD
+#include "cores/IntelSMDGlobals.h"
+#endif
+
+
 using namespace std;
 
 class CPulldownCorrection
@@ -411,6 +416,7 @@
     }
     else if (pMsg->IsType(CDVDMsg::GENERAL_DELAY))
     {
+//#ifndef HAS_INTEL_SMD
       if (m_speed != DVD_PLAYSPEED_PAUSE)
       {
         double timeout = static_cast<CDVDMsgDouble*>(pMsg)->m_value;
@@ -423,6 +429,7 @@
         while(!m_bStop && CDVDClock::GetAbsoluteClock() < timeout)
           Sleep(1);
       }
+//#endif
     }
     else if (pMsg->IsType(CDVDMsg::VIDEO_SET_ASPECT))
     {
@@ -444,6 +451,12 @@
       picture.iFlags &= ~DVP_FLAG_ALLOCATED;
       m_packets.clear();
 
+// TODO(q) #ifdef HAS_INTEL_SMD
+//       // TODO(q)
+//       // if(!m_pVideoCodec->IsDirectRendering())
+//          g_renderManager.Flush();
+// #endif
+
       m_pullupCorrection.Flush();
       //we need to recalculate the framerate
       //TODO: this needs to be set on a streamchange instead
@@ -839,6 +852,12 @@
 
 void CDVDPlayerVideo::SetSpeed(int speed)
 {
+// #ifdef HAS_INTEL_SMD
+//   // TODO(q)
+//   // if(m_pVideoCodec && speed == DVD_PLAYSPEED_PAUSE)
+//   //   m_pVideoCodec->SetSpeed(speed);
+// #endif
+
   if(m_messageQueue.IsInited())
     m_messageQueue.Put( new CDVDMsgInt(CDVDMsg::PLAYER_SETSPEED, speed), 1 );
   else
@@ -890,6 +909,14 @@
 #ifdef HAS_VIDEO_PLAYBACK
 void CDVDPlayerVideo::ProcessOverlays(DVDVideoPicture* pSource, double pts)
 {
+// #ifdef HAS_INTEL_SMD
+//   // all video rendering is done with SMD clock, so we need to match it here
+//   if(m_speed == DVD_PLAYSPEED_PAUSE)
+//     pts = g_IntelSMDGlobals.IsmdToDvdPts(g_IntelSMDGlobals.GetAudioPauseCurrentTime());
+//   else
+//     pts = g_IntelSMDGlobals.IsmdToDvdPts(g_IntelSMDGlobals.GetAudioCurrentTime());
+// #endif
+
   // remove any overlays that are out of time
   if (m_started)
     m_pOverlayContainer->CleanUp(pts - m_iSubtitleDelay);
@@ -961,6 +988,11 @@
       if(pOverlay->iGroupId != pSource->iGroupId)
         continue;
 
+// #ifdef HAS_INTEL_SMD
+//     if(pts == DVD_NOPTS_VALUE)
+//       pts = 0;
+// #endif
+
       double pts2 = pOverlay->bForced ? pts : pts - m_iSubtitleDelay;
 
       if((pOverlay->iPTSStartTime <= pts2 && (pOverlay->iPTSStopTime > pts2 || pOverlay->iPTSStopTime == 0LL)) || pts == 0)
@@ -1138,6 +1170,13 @@
       m_bAllowFullscreen = false; // only allow on first configure
     }
 
+#ifdef HAS_INTEL_SMD
+    if(pPicture->format == RENDER_FMT_NV12)
+    {
+      flags |= CONF_FLAGS_SMD_DECODING;
+    }
+#endif
+
     CLog::Log(LOGDEBUG,"%s - change configuration. %dx%d. framerate: %4.2f. format: %s",__FUNCTION__,pPicture->iWidth, pPicture->iHeight, config_framerate, formatstr.c_str());
     if(!g_renderManager.Configure(pPicture->iWidth, pPicture->iHeight, pPicture->iDisplayWidth, pPicture->iDisplayHeight, config_framerate, flags, pPicture->format, pPicture->extended_format, m_hints.orientation))
     {
@@ -1520,11 +1559,18 @@
 
 std::string CDVDPlayerVideo::GetPlayerInfo()
 {
+  float fps = m_fFrameRate;
+
+#ifdef HAS_INTEL_SMD
+  fps = g_IntelSMDGlobals.GetRenderFPS();
+#endif
+
   std::ostringstream s;
-  s << "fr:"     << fixed << setprecision(3) << m_fFrameRate;
+  s << "fr:"     << fixed << setprecision(3) << fps;
   s << ", vq:"   << setw(2) << min(99,GetLevel()) << "%";
   s << ", dc:"   << m_codecname;
   s << ", Mb/s:" << fixed << setprecision(2) << (double)GetVideoBitrate() / (1024.0*1024.0);
+#ifndef HAS_INTEL_SMD
   s << ", drop:" << m_iDroppedFrames;
 
   int pc = m_pullupCorrection.GetPatternLength();
@@ -1532,7 +1578,17 @@
     s << ", pc:" << pc;
   else
     s << ", pc:none";
-
+#else
+  // TODO(q)
+  // CStdString timeStr = "N/A";
+  // double pts = m_messageQueue.GetFirstPTS();
+  // if(pts != DVD_NOPTS_VALUE)
+  // {
+  //   pts /= 1000;
+  //   StringUtils::MilisecondsToTimeString((int)pts, timeStr);
+  // }
+  // s << ", pts: " << timeStr;
+#endif
   return s.str();
 }
 
@@ -1575,6 +1631,10 @@
   //and is able to calculate the correct frame duration from it
   double frameduration = m_pullupCorrection.GetFrameDuration();
 
+#ifdef HAS_INTEL_SMD
+  frameduration = g_IntelSMDGlobals.GetFrameDuration();
+#endif
+
   if (frameduration == DVD_NOPTS_VALUE ||
       (g_advancedSettings.m_videoFpsDetect == 1 && m_pullupCorrection.GetPatternLength() > 1))
   {
diff -x generated -r -u xbmc-12.2/xbmc/guilib/JpegIO.h xbmc/xbmc/guilib/JpegIO.h
--- xbmc-12.2/xbmc/guilib/JpegIO.h	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/guilib/JpegIO.h	2013-08-27 17:35:26.000000000 +0200
@@ -26,7 +26,9 @@
 #pragma comment(lib, "turbojpeg-static.lib")
 #endif
 
+extern "C" {
 #include <jpeglib.h>
+}
 #include "utils/StdString.h"
 
 class CJpegIO
diff -x generated -r -u xbmc-12.2/xbmc/windowing/egl/EGLWrapper.cpp xbmc/xbmc/windowing/egl/EGLWrapper.cpp
--- xbmc-12.2/xbmc/windowing/egl/EGLWrapper.cpp	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/windowing/egl/EGLWrapper.cpp	2013-08-27 17:35:26.000000000 +0200
@@ -26,6 +26,7 @@
 #include "EGLNativeTypeAndroid.h"
 #include "EGLNativeTypeAmlogic.h"
 #include "EGLNativeTypeRaspberryPI.h"
+#include "EGLNativeTypeBoxee.h"
 #include "EGLWrapper.h"
 
 #define CheckError() m_result = eglGetError(); if(m_result != EGL_SUCCESS) CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, m_result);
@@ -83,6 +84,15 @@
       }
     }
   }
+  nativeGuess = new CEGLNativeTypeBoxee;
+  if (nativeGuess->CheckCompatibility())
+  {
+    if(implementation == nativeGuess->GetNativeName() || implementation == "auto")
+    {
+      m_nativeTypes = nativeGuess;
+      ret = true;
+    }
+  }
 
   if (ret && m_nativeTypes)
     m_nativeTypes->Initialize();
diff -x generated -r -u xbmc-12.2/xbmc/windowing/egl/Makefile xbmc/xbmc/windowing/egl/Makefile
--- xbmc-12.2/xbmc/windowing/egl/Makefile	2013-05-03 07:57:41.000000000 +0200
+++ xbmc/xbmc/windowing/egl/Makefile	2013-08-27 17:35:26.000000000 +0200
@@ -2,6 +2,7 @@
 
 SRCS = WinSystemEGL.cpp
 SRCS+= EGLNativeTypeAmlogic.cpp
+SRCS+= EGLNativeTypeBoxee.cpp
 SRCS+= EGLNativeTypeAndroid.cpp
 SRCS+= EGLNativeTypeRaspberryPI.cpp
 SRCS+= EGLWrapper.cpp
